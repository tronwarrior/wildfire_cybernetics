<div id="colOne">
  <h1>Design for Change, Adaptability and Simplicity</h1>
  <p>
    <blockquote>
      <i>
        "Fools ignore complexity. Pragmatists suffer it. Some can avoid it.
        Geniuses remove it."<br />
        <a href="http://en.wikipedia.org/wiki/Alan_Perlis" target="new">
          Alan J Perlis
        </a>
      </i>
    </blockquote>
  </p>

  <h2>Architecture</h2>
  <p>
    Software architecture is the structure of the components that
    comprise a software system. Architecture is borne out of the system
    requirements. All software has an architecture, whether that
    architecture is planned and intentional or not. Consider the difference
    between a building that has been thoughtfully designed by a skilled and
    technically savvy architect and a building that has just been thrown
    together without much thought for design - which one is probably more
    reliable, more stable over time, more pleasing to the users and will stand
    the test of time? Most likely one that is well thought out.
  </p>

  <p>
    With that said, I'll quote
    <%= link_to 'Tom McCabe of McCabe Software', 'http://www.mccabe.com' %>:
    "requirements do NOT execute, CODE does." You can have the best
    architectural model ever devised, but the model doesn't execute. The code
    determines the actual architecture, so while it's critical to keep the
    architectural model simple and logical while still capturing all the
    requirements, it's even more critical to ensure the code doesn't violate
    the simplicity of the model. The key concept here is synergy between all
    phases of the development process.
  </p>

  <h3>Measure of Importance</h3>
  <p>
    You might ask yourself if it's really that important and does it really
    matter. I'm going to answer with a resounding "YES!" As anyone that has ever
    developed software for even the simplest system, building software is
    extremely hard. It's even harder building it in the blind, without a good
    architecture and without understandable models to describe the elements of
    the system. It's an objective fact that most software projects end up
    exceeding cost and schedule often without even delivering the intended
    product and operating below the expected performance.
  </p>

  <h3>Some of the Reasons</h3>

  <p>
    Off the top of my head, some of the reasons why it's so important to develop
    the system architecture first are:

    <ol>
      <li>It provides a common vision where stakeholders can all be brought to get oriented</li>
      <li>It provides a means of communicating abstract ideas</li>
      <li>It translates users needs into a proposed solution</li>
      <li>It uses proven and tested architectural principles and methodologies</li>
      <li>It ensures technical correctness</li>
      <li>It produces the foundation for unambiguous and proper planning</li>
      <li>It ensures the intended solution requirements are met</li>
    </ol>
  </p>

  <h3>Complexity</h3>
  <p>
    Software has always been, by its very nature, complex. Measuring a software
    architecture for complexity up front and early can be a return on investment
    by eliminating potential problems before detailed design and implementation.
    The cost to fix errors in design is greatly increased once creation has
    begun.
  </p>

  <p>
    As systems get larger and software is called on to do more it becomes
    imperative that a system is created from the outset with an intelligent and
    adaptable architecture. Rigidity, over-complexity and tightly-coupled design
    and implementation wreaks havoc down the road with any system. 
  </p>


  <!-- <p>
    Software complexity can be defined as having elements of both algorithmic 
    and human psychological complexity. Developments in Object-Oriented (OO)
    architectures during the 1980's and 1990's only served to increase the
    complexity factor several fold. Most recent design metrics studies have been
    focused nearly exclusively on OO. Identifying and correcting unnecessary
    complexity in architectural and detailed design, prior to implementation and 
    construction can increase quality levels up front.
  </p>
  --> 
</div>

<div id="colTwo">
  <h3>Self Evident</h3>
    <ul>
      <li><a href="http://www.google.com" target="new">simplicity</a></li>
      <li><a href="http://www.yahoo.com" target="new">complexity</a></li>
    </ul>
</div>

<div style="clear: both;">&nbsp;</div>