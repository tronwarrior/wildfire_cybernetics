<div id="colOne">
  <h1>Design for Change, Adaptability and Simplicity</h1>
  <p>
    <blockquote>
      <i>
        "Fools ignore complexity. Pragmatists suffer it. Some can avoid it.
        Geniuses remove it."<br />
        <a href="http://en.wikipedia.org/wiki/Alan_Perlis" target="new">
          Alan J Perlis
        </a>
      </i>
    </blockquote>
  </p>

  <h2>Architecture</h2>
  <p>
    Software architecture is the structure of the components that
    comprise a software system. All software has an architecture, whether that
    architecture was intentional or not. Even software that has been cobbled
    together with little to no consideration for structure or design still has
    an architecture, even if it's completely ad hoc. Sometimes this works, most
    of the time not. Consider the difference between a building that has been
    thoughtfully designed by a skilled and technically savvy architect and a
    building that has just been thrown together without much thought for design
    - which one is probably more reliable, more stable over time, more pleasing
    to the users and will stand the test of time? Most likely the one with the
    well thought out design.
  </p>

  <h3>Importance</h3>
  <p>
    You might ask yourself if it's really that important and does it really
    matter. The answer is yes and some of the reasons why are:

    <ul>
      <li>Provides a means of communicating abstract ideas</li>
      <li>Translates users needs into a proposed solution</li>
      <li>Uses proven architectural principles and methodologies</li>
      <li>Ensures technical correctness up front</li>
      <li>Produces the foundation for unambiguous and proper planning</li>
      <li>Ensures the intended solution requirements are met</li>
    </ul>
  </p>

  <h3>Hallucination</h3>
  <p>

  </p>

  <h3>Complexity</h3>
  <p>
    Software has always been, by its very nature, complex. Measuring a software
    architecture for complexity up front and early can be a return on investment
    by eliminating potential problems before detailed design and implementation.
    The cost to fix errors in design is greatly increased once creation has
    begun.
  </p>

  <!-- As systems get larger and software is called upon to do more it becomes
    imperative that a system is created from the outset with an intelligent and
    adaptable architecture. Rigidity and over-complexity in architecture and
    design wreaks havoc down the road. -->

  <p>
    Software complexity can be defined as having elements of both algorithmic 
    and human psychological complexity. Developments in Object-Oriented (OO)
    architectures during the 1980's and 1990's only served to increase the
    complexity factor several fold. Most recent design metrics studies have been
    focused nearly exclusively on OO. Identifying and correcting unnecessary
    complexity in architectural and detailed design, prior to implementation and 
    construction can increase quality levels up front.
  </p>

 
  <h2>Design</h2>
  <p>

  </p>

</div>

<div id="colTwo">
  <h3>Self Evident</h3>
    <ul>
      <li><a href="http://www.google.com" target="new">simplicity</a></li>
      <li><a href="http://www.yahoo.com" target="new">complexity</a></li>
    </ul>
</div>

<div style="clear: both;">&nbsp;</div>